#!/bin/bash

#
#-----------------------------------------------------------------------
#
# This script runs the post-processor (UPP) on the NetCDF output files
# of the write component of the FV3-LAM model.
#
#-----------------------------------------------------------------------
#
date
export PS4='+ $SECONDS + '
#
#-----------------------------------------------------------------------
#
# Source the bash utility functions.
#
#-----------------------------------------------------------------------
#
. ${HOMErrfs}/ush/source_util_funcs.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u -x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs the post-processor (UPP)
on the output files corresponding to a specified forecast hour.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Set the NCO standard environment variables (Table 1, pp.4)
#
#-----------------------------------------------------------------------
#
# Define job and jobid by default for rocoto
WORKFLOW_MANAGER="${WORKFLOW_MANAGER:-rocoto}"
if [ "${WORKFLOW_MANAGER}" = "rocoto" ]; then
  # Flag for shared working directory
  flag_shared_working_dir="FALSE"
  if [ "${SCHED}" = "slurm" ]; then
    job_default=${SLURM_JOB_NAME}
    pid_default=${SLURM_JOB_ID}
  elif [ "${SCHED}" = "pbspro" ]; then
    job_default=${PBS_JOBNAME}
    pid_default=${PBS_JOBID}
  else
    job_default="task"
    pid_default=$$
  fi
  if [ "${flag_shared_working_dir}" = "TRUE" ]; then
    jobid_default="${job_default}.${PDY}${cyc}"
  else
    jobid_default="${job_default}.${pid_default}"
  fi
fi
export job="${job:-${job_default}}"
export jobid="${jobid:-${jobid_default}}"

# Set environment variables
export NET="${NET:-${NET_default}}"
export RUN="${RUN:-${RUN_default}}"

export USHrrfs="${HOMErrfs}/ush"
export EXECrrfs="${HOMErrfs}/exec"
export PARMrrfs="${HOMErrfs}/parm"
export SCRIPTSrrfs="${HOMErrfs}/scripts"
export LOGDIR="${COMROOT}/output/logs"
#
#-----------------------------------------------------------------------
#
# Create a temp working directory (DATA) and cd into it.
#
#-----------------------------------------------------------------------
#
export DATA="${DATA:-${DATAROOT}/${jobid}}"
mkdir -p $DATA
cd $DATA
#
#-----------------------------------------------------------------------
#
# Set COM type definitions.
#
#-----------------------------------------------------------------------
#
[[ "$WORKFLOW_MANAGER" = "rocoto" ]] && export COMROOT=$COMROOT
export COMIN="${COMIN:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc})}"
export COMOUT="${COMOUT:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc})}"

mkdir -p ${COMOUT}

# Run setpdy to initialize PDYm and PDYp variables
export cycle="${cycle:-t${cyc}z}"
setpdy.sh
. ./PDY
#
#-----------------------------------------------------------------------
#
# Set other environment variables.
#
#-----------------------------------------------------------------------
#
#
# CYCLE_TYPE is to indicate which type of cycle this job for:
#   spinup: this job is for spin-up cycles
#   others(prod): this job is for product cycle
#
export CYCLE_TYPE="${CYCLE_TYPE:-prod}"
export CYCLE_SUBTYPE="${CYCLE_SUBTYPE:-empty}"

export CDATE="${CDATE:-${PDY}${cyc}}"
export SLASH_ENSMEM_SUBDIR="${SLASH_ENSMEM_SUBDIR:-}"
export fhr="${fhr:-000}"
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job.
#
#-----------------------------------------------------------------------
#
export pgmout="${DATA}/OUTPUT.$$"
env

$SCRIPTSrrfs/exrrfs_run_post.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/function.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

