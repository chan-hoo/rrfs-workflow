#!/bin/bash
#
#-----------------------------------------------------------------------
#
# This J-JOB script runs the radar reflectivity preprocess 
#
#-----------------------------------------------------------------------
#
date
export PS4='+ $SECONDS + '
#
#-----------------------------------------------------------------------
#
# Source the bash utility functions.
#
#-----------------------------------------------------------------------
#
. ${HOMErrfs}/ush/source_util_funcs.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u -x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs a radar reflectivity 
preprocess with FV3 for the specified cycle.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Set the NCO standard environment variables (Table 1, pp.4)
#
#-----------------------------------------------------------------------
#
# Flag for shared working directory
flag_shared_working_dir="FALSE"

# Define job and jobid by default for rocoto
WORKFLOW_MANAGER="${WORKFLOW_MANAGER:-rocoto}"
if [ "${WORKFLOW_MANAGER}" = "rocoto" ]; then
  if [ "${SCHED}" = "slurm" ]; then
    job_default=${SLURM_JOB_NAME}
    pid_default=${SLURM_JOB_ID}
  elif [ "${SCHED}" = "pbspro" ]; then
    job_default=${PBS_JOBNAME}
    pid_default=${PBS_JOBID}
  else
    job_default="task"
    pid_default=$$
  fi
  if [ "${flag_shared_working_dir}" = "TRUE" ]; then
    jobid_default="${job_default}.${PDY}${cyc}"
  else
    jobid_default="${job_default}.${PDY}${cyc}.${pid_default}"
  fi
fi
export job="${job:-${job_default}}"
export jobid="${jobid:-${jobid_default}}"

# Set environment variables
export NET="${NET:-${NET_default}}"
export RUN="${RUN:-${RUN_default}}"

export USHrrfs="${HOMErrfs}/ush"
export EXECrrfs="${HOMErrfs}/exec"
export PARMrrfs="${HOMErrfs}/parm"
export SCRIPTSrrfs="${HOMErrfs}/scripts"
export LOGDIR="${COMROOT}/output/logs"
#
#-----------------------------------------------------------------------
#
# Create a temp working directory (DATA) and cd into it.
#
#-----------------------------------------------------------------------
#
export DATA="${DATA:-${DATAROOT}/${jobid}}"
mkdir -p $DATA
cd $DATA
#
#-----------------------------------------------------------------------
#
# Set other environment variables.
#
#-----------------------------------------------------------------------
#
# CYCLE_TYPE is to indicate which type of cycle this job for:
#   spinup: this job is for spin-up cycles
#   others(prod): this job is for product cycle
#
export CYCLE_TYPE="${CYCLE_TYPE:-prod}"

export CDATE="${CDATE:-${PDY}${cyc}}"
#
#-----------------------------------------------------------------------
#
# Set COM type definitions.
#
#-----------------------------------------------------------------------
#
[[ "$WORKFLOW_MANAGER" = "rocoto" ]] && export COMROOT=$COMROOT
export COMIN="${COMIN:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc}${SLASH_ENSMEM_SUBDIR})}"
export COMOUT_BASEDIR="${COMOUT_BASEDIR:-$(compath.py -o ${NET}/${model_ver})}"
export COMOUT="${COMOUT_BASEDIR}/${RUN}.${PDY}/${cyc}${SLASH_ENSMEM_SUBDIR}"
export COMOUT_gridspec="${COMOUT_BASEDIR}/grid_spec"

mkdir -p ${COMOUT}
mkdir -p ${COMOUT_gridspec}

# Run setpdy to initialize PDYm and PDYp variables
export cycle="${cycle:-t${cyc}z}"
setpdy.sh
. ./PDY
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job.
#
#-----------------------------------------------------------------------
#
export pgmout="${DATA}/OUTPUT.$$"
env

python -u ${SCRIPTSrrfs}/exrrfs_process_smoke.py \
  "${FIX_SMOKE_DUST}/${PREDEF_GRID_NAME}" \
  "${FIRE_RAVE_DIR}" \
  "${DATA}" \
  "${PREDEF_GRID_NAME}"
export err=$?; err_chk

ECHO=/bin/echo
AWK="/bin/gawk --posix"
SED=/bin/sed
DATE=/bin/date

START_DATE=$(echo "${CDATE}" | sed 's/\([[:digit:]]\{2\}\)$/ \1/')

current_day=`${DATE} -d "${PDY}"`
current_hh=`${DATE} -d ${cyc} +"%H"`
prev_hh=`${DATE} -d "$current_hh -24 hour" +"%H"`
previous_day=`${DATE} '+%C%y%m%d' -d "$current_day-1 days"`
previous_day=${previous_day}${prev_hh}
if [ "${CYCLE_TYPE}" = "spinup" ]; then
  output_filename=SMOKE_RRFS_data_${CDATE}00_spinup.nc
else
  output_filename=SMOKE_RRFS_data_${CDATE}00.nc
fi
echo ${previous_day}
echo ${output_filename}

cd ${DATA}

# Convert START_TIME from 'CDATE' format to Unix date format, e.g. "Fri May  6 19:50:23 GMT 2005"
if [ `${ECHO} "${previous_day}" | ${AWK} '/^[[:digit:]]{10}$/'` ]; then
  previous_day=`${ECHO} "${previous_day}" | ${SED} 's/\([[:digit:]]\{2\}\)$/ \1/'`
else
  ${ECHO} "ERROR: start time, '${previous_day}', is not in 'yyyymmddhh' or 'yyyymmdd hh' format"
  exit 1
fi
previous_day=`${DATE} -d "${previous_day}"`
echo ${previous_day}

nfiles=24
files2cat=()
for i in $(seq 0 $(($nfiles - 1)) )
do
timestr=`date +%Y%m%d%H -d "$previous_day + $i hours"`
echo ${timestr}
files2cat[$i]=${PREDEF_GRID_NAME}_intp_${timestr}00_${timestr}00.nc
done
echo ${files2cat[*]}
ncrcat ${files2cat[*]} ${output_filename} 
cp ${output_filename}  ${COMOUT}

if [ -e "$pgmout" ]; then
  cat $pgmout
fi
#
#-----------------------------------------------------------------------
#
# Whether or not working directory DATA should be kept.
#
#-----------------------------------------------------------------------
#
if [ "${KEEPDATA}" = "NO" ] && [ "${flag_shared_working_dir}" = "FALSE" ]; then
  rm -rf ${DATA}
fi
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/function.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

